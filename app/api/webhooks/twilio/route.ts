import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import { openai } from '@/lib/openai'
import { twilioClient } from '@/lib/twilio'

export async function POST(request: NextRequest) {
  try {
    console.log('üîî Webhook do Twilio recebido:', new Date().toISOString())
    
    const formData = await request.formData()
    const from = formData.get('From') as string
    const body = formData.get('Body') as string
    const mediaUrl = formData.get('MediaUrl0') as string
    const messageSid = formData.get('MessageSid') as string
    
    console.log('üì± Dados recebidos:', { from, body: body?.substring(0, 50), hasMedia: !!mediaUrl, messageSid })

    // Remover prefixo "whatsapp:" do n√∫mero
    const phone = from.replace('whatsapp:', '')
    console.log('üìû Telefone processado:', phone)

    // Buscar usu√°rio pelo telefone
    console.log('üîç Buscando usu√°rio no banco de dados...')
    console.log('üìû Telefone formatado para busca:', phone)
    
    let user = await prisma.user.findUnique({
      where: { phone },
      include: { tenant: true }
    })

    // Se n√£o encontrou, tentar v√°rias estrat√©gias de busca
    if (!user) {
      console.log('üîç Primeira busca n√£o encontrou, tentando estrat√©gias alternativas...')
      
      // Estrat√©gia 1: Extrair apenas os d√≠gitos
      const phoneDigits = phone.replace(/\D/g, '')
      console.log('üî¢ D√≠gitos extra√≠dos:', phoneDigits)
      
      // Estrat√©gia 2: Buscar com diferentes formatos poss√≠veis
      const searchFormats = [
        phone, // Formato original
        `+${phoneDigits}`, // Com + na frente
        phoneDigits, // S√≥ n√∫meros
        phoneDigits.slice(-11), // √öltimos 11 d√≠gitos
        `+55${phoneDigits.slice(-11)}`, // Brasil espec√≠fico
      ]
      
      console.log('üì± Formatos de busca:', searchFormats)
      
      for (const format of searchFormats) {
        const users = await prisma.user.findMany({
          where: {
            OR: [
              { phone: format },
              { phone: { contains: format.slice(-11) } } // √öltimos 11 d√≠gitos
            ]
          },
          include: { tenant: true }
        })
        
        if (users.length > 0) {
          user = users[0]
          console.log('‚úÖ Usu√°rio encontrado com formato:', format)
          console.log('üë§ Dados do usu√°rio:', { id: user.id, name: user.name, phone: user.phone })
          break
        }
      }
    }

    console.log('üë§ Usu√°rio encontrado:', user ? { id: user.id, name: user.name, phone: user.phone } : 'null')

    if (!user) {
      console.log('‚ùå USU√ÅRIO N√ÉO ENCONTRADO COM NENHUMA ESTRAT√âGIA')
      console.log('üîç Telefone original (from):', from)
      console.log('üîç Telefone processado:', phone)
      
      // Debug completo: mostrar todos os usu√°rios
      const allUsers = await prisma.user.findMany({
        select: { name: true, phone: true, email: true, createdAt: true }
      })
      
      console.log('üì± TODOS OS USU√ÅRIOS NO BANCO:')
      allUsers.forEach((u, index) => {
        console.log(`  ${index + 1}. ${u.name} (${u.email})`)
        console.log(`     üìû Telefone: "${u.phone}"`)
        console.log(`     üìÖ Cadastrado: ${u.createdAt}`)
        console.log('') // linha vazia
      })
      
      console.log('‚ö†Ô∏è  POSS√çVEIS CAUSAS:')
      console.log('   1. Usu√°rio n√£o cadastrado (normal - enviar promocional)')
      console.log('   2. Telefone cadastrado em formato diferente')
      console.log('   3. Problema na formata√ß√£o do WhatsApp')
      
      // Se o usu√°rio parece brasileiro mas n√£o foi encontrado, pode ser problema de formato
      const phoneDigits = phone.replace(/\D/g, '')
      if (phoneDigits.startsWith('55') && phoneDigits.length >= 12) {
        console.log('üáßüá∑ Parece ser n√∫mero brasileiro n√£o cadastrado ou com problema de formato')
      }
      
      // Gerar mensagem promocional APENAS para usu√°rios realmente novos
      console.log('üì§ Enviando mensagem promocional para usu√°rio n√£o cadastrado')
      const promotionalMessage = await generatePromotionalMessage()
      await sendWhatsAppMessage(from, promotionalMessage)
      return NextResponse.json({ message: 'Usu√°rio n√£o encontrado - mensagem promocional enviada' })
    }

    // Verificar se o tenant tem WhatsApp habilitado
    console.log('üè¢ Verificando plano WhatsApp:', { hasWhatsApp: user.tenant.hasWhatsApp, credits: user.tenant.credits })
    
    if (!user.tenant.hasWhatsApp) {
      console.log('‚ùå WhatsApp n√£o habilitado para este tenant')
      await sendWhatsAppMessage(from, 'Seu plano atual n√£o inclui integra√ß√£o com WhatsApp. Fa√ßa upgrade para Premium.')
      return NextResponse.json({ message: 'WhatsApp n√£o habilitado' })
    }

    // Verificar se tem cr√©ditos
    if (user.tenant.credits <= 0) {
      console.log('‚ùå Sem cr√©ditos suficientes:', user.tenant.credits)
      await sendWhatsAppMessage(from, 'Voc√™ n√£o tem cr√©ditos suficientes. Entre em contato com o suporte.')
      return NextResponse.json({ message: 'Sem cr√©ditos' })
    }

    // Se recebeu uma imagem/documento (recibo)
    if (mediaUrl) {
      return await handleReceiptUpload(from, mediaUrl, user, messageSid)
    }

    // Se recebeu texto
    if (body) {
      return await handleTextMessage(from, body, user)
    }

    return NextResponse.json({ message: 'Mensagem processada' })

  } catch (error) {
    console.error('Erro no webhook do Twilio:', error)
    return NextResponse.json(
      { message: 'Erro interno do servidor' },
      { status: 500 }
    )
  }
}

async function handleReceiptUpload(from: string, mediaUrl: string, user: any, messageSid: string) {
  try {
    console.log('üì• Processando imagem do recibo...')
    console.log('üîó URL da m√≠dia:', mediaUrl)
    console.log('üë§ Usu√°rio:', user.id, user.name)
    console.log('üè¢ Tenant:', user.tenant.id, user.tenant.name)
    
    // Baixar a m√≠dia com autentica√ß√£o Twilio
    const accountSid = process.env.TWILIO_ACCOUNT_SID
    const authToken = process.env.TWILIO_AUTH_TOKEN
    
    if (!accountSid || !authToken) {
      throw new Error('Credenciais Twilio n√£o configuradas')
    }
    
    // Criar headers de autentica√ß√£o Basic Auth
    const auth = Buffer.from(`${accountSid}:${authToken}`).toString('base64')
    
    const mediaResponse = await fetch(mediaUrl, {
      headers: {
        'Authorization': `Basic ${auth}`,
        'User-Agent': 'FinSplit/1.0'
      }
    })
    
    if (!mediaResponse.ok) {
      throw new Error(`Erro ao baixar m√≠dia: ${mediaResponse.status} ${mediaResponse.statusText}`)
    }
    
    const mediaBuffer = await mediaResponse.arrayBuffer()
    
    // Verificar headers da resposta
    const contentType = mediaResponse.headers.get('content-type')
    const contentLength = mediaResponse.headers.get('content-length')
    console.log('üìã Headers da m√≠dia:')
    console.log('  - Content-Type:', contentType)
    console.log('  - Content-Length:', contentLength)
    console.log('  - Buffer size:', mediaBuffer.byteLength)
    
    // Verificar se √© realmente uma imagem
    if (!contentType || !contentType.startsWith('image/')) {
      console.log('‚ùå N√£o √© uma imagem v√°lida. Content-Type:', contentType)
      console.log('üìÑ Conte√∫do recebido (primeiros 200 chars):', Buffer.from(mediaBuffer).toString('utf8').substring(0, 200))
      throw new Error(`Formato inv√°lido: ${contentType}. Esperado: image/*`)
    }
    
    if (mediaBuffer.byteLength < 1000) {
      throw new Error(`Imagem muito pequena: ${mediaBuffer.byteLength} bytes. M√≠nimo esperado: 1000 bytes`)
    }
  
    // Converter para base64
    const base64Media = Buffer.from(mediaBuffer).toString('base64')
    console.log('üìä Base64 gerado:', base64Media.substring(0, 100) + '...')

    // Extrair dados com OpenAI
    let extractionResult = await extractReceiptData(base64Media)

    // Se falhar na OpenAI, informar erro espec√≠fico
    if (!extractionResult.success) {
      console.log('‚ùå OpenAI falhou:', extractionResult.error)
      
      let errorMessage = 'Erro ao processar o recibo. '
      const error = extractionResult.error || 'Erro desconhecido'
      
      if (error.includes('unsupported image')) {
        errorMessage += 'Formato de imagem n√£o suportado. Use PNG, JPEG, GIF ou WebP.'
      } else if (error.includes('quota')) {
        errorMessage += 'Quota OpenAI excedida. Tente novamente mais tarde.'
      } else {
        errorMessage += 'Tente enviar uma imagem mais clara ou em formato diferente.'
      }
      
      await sendWhatsAppMessage(from, errorMessage)
      return NextResponse.json({ message: 'Falha na extra√ß√£o: ' + extractionResult.error })
    }

    // Validar campos obrigat√≥rios
    const validation = validateRequiredFields(extractionResult.data)
    if (!validation.isValid) {
      const missingFields = validation.missing.map(field => {
        const fieldNames = {
          recebedor: 'Recebedor/Estabelecimento',
          data: 'Data',
          valor: 'Valor',
          categoria: 'Categoria'
        }
        return fieldNames[field as keyof typeof fieldNames] || field
      }).join(', ')

      const message = `‚ùå Dados obrigat√≥rios n√£o identificados:\n\n` +
        `Campos faltando: ${missingFields}\n\n` +
        `Por favor, envie uma imagem mais clara ou informe os dados manualmente:\n` +
        `"recebedor: [nome do recebedor/estabelecimento]"\n` +
        `"data: [data no formato DD/MM/AAAA]"\n` +
        `"valor: [valor total]"\n` +
        `"categoria: [categoria da despesa]"`

      await sendWhatsAppMessage(from, message)
      return NextResponse.json({ message: 'Campos obrigat√≥rios n√£o identificados' })
    }

    // Verificar duplicatas
    const duplicate = await checkDuplicateExpense(user.id, extractionResult.data)
    if (duplicate) {
      const duplicateMessage = `‚ö†Ô∏è ATEN√á√ÉO: Despesa similar j√° cadastrada!\n\n` +
        `üìã Dados existentes:\n` +
        `üè™ Local: ${duplicate.description}\n` +
        `üí∞ Valor: R$ ${duplicate.amount}\n` +
        `üìÖ Data: ${duplicate.date.toLocaleDateString('pt-BR')}\n` +
        `üìä Status: ${duplicate.status === 'CONFIRMED' ? 'Confirmada' : 'Pendente'}\n\n` +
        `Deseja cadastrar mesmo assim?\n` +
        `Responda "sim" para confirmar ou "n√£o" para cancelar.`

      await sendWhatsAppMessage(from, duplicateMessage)
      
      // Salvar despesa como pendente para confirma√ß√£o
      const expense = await prisma.expense.create({
        data: {
          description: extractionResult.data.recebedor?.nome || extractionResult.data.estabelecimento?.nome || extractionResult.data.merchant,
          amount: extractionResult.data.totais?.total_final || extractionResult.data.amount,
          date: extractionResult.data.datas?.emissao ? new Date(extractionResult.data.datas.emissao) : new Date(extractionResult.data.date),
          status: 'PENDING',
          receiptUrl: mediaUrl,
          receiptData: extractionResult.data,
          aiExtracted: true,
          aiConfidence: extractionResult.confidence,
          paidBy: {
            connect: { id: user.id }
          },
          group: {
            connect: { id: (await getOrCreateDefaultGroup(user.tenantId, user.id)).id }
          },
          categoryId: undefined
        }
      })

      return NextResponse.json({ message: 'Despesa duplicada detectada, aguardando confirma√ß√£o' })
    }

    console.log('üíæ Criando despesa no banco...')
    
    // Criar despesa pendente
    const expense = await prisma.expense.create({
      data: {
        description: extractionResult.data.recebedor?.nome || extractionResult.data.estabelecimento?.nome || extractionResult.data.description || 'Recibo enviado via WhatsApp',
        amount: extractionResult.data.totais?.total_final || extractionResult.data.amount || 0,
        date: extractionResult.data.datas?.emissao ? new Date(extractionResult.data.datas.emissao) : new Date(),
        status: 'PENDING',
        receiptUrl: mediaUrl,
        receiptData: extractionResult.data,
        aiExtracted: true,
        aiConfidence: extractionResult.confidence,
        paidBy: {
          connect: { id: user.id }
        },
        group: {
          connect: { id: (await getOrCreateDefaultGroup(user.tenantId, user.id)).id }
        },
        categoryId: undefined
      }
    })
    
    console.log('‚úÖ Despesa criada com sucesso:', expense.id)

    // Consumir cr√©dito
    await prisma.tenant.update({
      where: { id: user.tenantId },
      data: { credits: { decrement: 1 } }
    })

    // Log de auditoria
    await prisma.auditLog.create({
      data: {
        action: 'RECEIPT_UPLOAD_WHATSAPP',
        entity: 'EXPENSE',
        entityId: expense.id,
        details: { mediaUrl, messageSid, aiConfidence: extractionResult.confidence },
        tenantId: user.tenantId,
        userId: user.id
      }
    })

    console.log('üìã Buscando grupos do usu√°rio...')
    
    // Buscar grupos do usu√°rio para sele√ß√£o
    const userGroups = await getUserGroups(user.id, user.tenantId)
    console.log('üìã Grupos encontrados:', userGroups.length)
    
    // Enviar confirma√ß√£o com sele√ß√£o de grupo
    let message = `‚úÖ Recibo recebido!\n\n` +
      `üë§ Recebedor: ${extractionResult.data.recebedor?.nome || extractionResult.data.estabelecimento?.nome || 'N√£o identificado'}\n` +
      `üí∞ Valor: R$ ${extractionResult.data.totais?.total_final || extractionResult.data.amount || 0}\n` +
      `üìÖ Data: ${extractionResult.data.datas?.emissao || extractionResult.data.date || 'N√£o identificada'}\n` +
      `üìÑ Tipo: ${extractionResult.data.documento?.tipo || extractionResult.data.tipo_transacao || 'Recibo'}\n\n`

    // Sempre mostrar grupos pr√©-definidos + op√ß√£o de criar novo
    message += `üìã Selecione o grupo de despesas:\n`
    message += `1. Alimenta√ß√£o üçΩÔ∏è\n`
    message += `2. Transporte üöó\n`
    message += `3. Lazer üéÆ\n`
    message += `4. Moradia üè†\n`
    
    if (userGroups.length > 0) {
      message += `5. Meus grupos:\n`
      userGroups.forEach((group, index) => {
        message += `   ${index + 6}. ${group.name}\n`
      })
    }
    
    message += `0. Criar novo grupo\n\n`
    message += `Responda com o n√∫mero do grupo ou "0" para novo grupo.`
    
    // Definir estado do usu√°rio para aguardar sele√ß√£o de grupo
    const predefinedGroups = [
      { id: 'alimentacao', name: 'Alimenta√ß√£o', description: 'Despesas com comida, restaurantes, mercado' },
      { id: 'transporte', name: 'Transporte', description: 'Uber, t√°xi, combust√≠vel, passagens' },
      { id: 'lazer', name: 'Lazer', description: 'Entretenimento, cinema, shows, viagens' },
      { id: 'moradia', name: 'Moradia', description: 'Aluguel, contas, manuten√ß√£o' }
    ]
    
    await setUserState(user.id, { 
      action: 'SELECTING_GROUP', 
      groups: [...predefinedGroups, ...userGroups],
      predefinedGroups: predefinedGroups,
      userGroups: userGroups,
      pendingExpenseData: {
        description: extractionResult.data.recebedor?.nome || extractionResult.data.estabelecimento?.nome,
        amount: extractionResult.data.totais?.total_final || extractionResult.data.amount,
        date: extractionResult.data.datas?.emissao ? new Date(extractionResult.data.datas.emissao) : new Date(),
        receiptData: extractionResult.data,
        mediaUrl: mediaUrl
      }
    })

        console.log('üì§ Enviando mensagem final...')
    console.log('üìù Conte√∫do da mensagem:', message)
    
    await sendWhatsAppMessage(from, message)
    
    console.log('‚úÖ Processamento do recibo conclu√≠do com sucesso!')
    return NextResponse.json({ message: 'Recibo processado com sucesso' })

  } catch (error) {
    console.error('Erro ao processar recibo:', error)
    await sendWhatsAppMessage(from, 'Erro ao processar o recibo. Tente novamente.')
    return NextResponse.json({ message: 'Erro ao processar recibo' })
  }
}

async function handleTextMessage(from: string, body: string, user: any) {
  const text = body.toLowerCase().trim()
  
  console.log('üì± Processando mensagem de texto:', text)
  console.log('üë§ Usu√°rio:', user.id, user.name)

  // Verificar se o usu√°rio est√° em processo de sele√ß√£o de grupo
  const userState = await getUserState(user.id)
  console.log('üîç Estado atual do usu√°rio:', userState)
  
  if (userState && userState.action === 'SELECTING_GROUP') {
    console.log('üìã Usu√°rio selecionando grupo...')
    return await handleGroupSelection(from, text, user, userState)
  }

  if (text === 'sim' || text === 'yes' || text === 'confirmar') {
    console.log('‚úÖ Usu√°rio confirmando despesa...')
    // Verificar se o usu√°rio est√° aguardando confirma√ß√£o com grupo selecionado
    const currentUserState = await getUserState(user.id)
    
    if (currentUserState && currentUserState.action === 'WAITING_CONFIRMATION') {
              console.log('üéØ Criando despesa no grupo:', currentUserState.groupId)
        console.log('üìä Dados da despesa:', currentUserState.pendingExpenseData)
        
        // Criar despesa no grupo selecionado
        const expense = await prisma.expense.create({
          data: {
            description: currentUserState.pendingExpenseData.description,
            amount: currentUserState.pendingExpenseData.amount,
            date: currentUserState.pendingExpenseData.date,
            status: 'CONFIRMED',
            receiptUrl: currentUserState.pendingExpenseData.mediaUrl,
            receiptData: currentUserState.pendingExpenseData.receiptData,
            aiExtracted: true,
            aiConfidence: 0.95,
            paidBy: {
              connect: { id: user.id }
            },
            group: {
              connect: { id: currentUserState.groupId }
            },
            categoryId: undefined
          }
        })
        
        console.log('‚úÖ Despesa criada com sucesso:', expense.id)

        // Log de auditoria
        await prisma.auditLog.create({
          data: {
            action: 'EXPENSE_CONFIRMED_WHATSAPP',
            entity: 'EXPENSE',
            entityId: expense.id,
            details: { confirmedVia: 'whatsapp', groupId: currentUserState.groupId },
            tenantId: user.tenantId,
            userId: user.id
          }
        })

        // Enviar link da planilha
        const dashboardUrl = `${process.env.NEXTAUTH_URL}/dashboard/groups/${currentUserState.groupId}`
        await sendWhatsAppMessage(from, `‚úÖ Despesa confirmada no grupo!\n\nüìä Veja na planilha: ${dashboardUrl}`)
        
        // Limpar estado do usu√°rio
        await setUserState(user.id, null)
      
    } else {
      // Confirmar despesa pendente (comportamento antigo)
      const pendingExpense = await prisma.expense.findFirst({
        where: {
          paidById: user.id,
          status: 'PENDING'
        },
        orderBy: { createdAt: 'desc' }
      })

      if (pendingExpense) {
        await prisma.expense.update({
          where: { id: pendingExpense.id },
          data: { status: 'CONFIRMED' }
        })

        // Log de auditoria
        await prisma.auditLog.create({
          data: {
            action: 'EXPENSE_CONFIRMED_WHATSAPP',
            entity: 'EXPENSE',
            entityId: pendingExpense.id,
            details: { confirmedVia: 'whatsapp' },
            tenantId: user.tenantId,
            userId: user.id
          }
        })

        // Enviar link da planilha
        const dashboardUrl = `${process.env.NEXTAUTH_URL}/dashboard/groups/${pendingExpense.groupId}`
        await sendWhatsAppMessage(from, `‚úÖ Despesa confirmada!\n\nüìä Veja na planilha: ${dashboardUrl}`)

      } else {
        await sendWhatsAppMessage(from, 'N√£o h√° despesas pendentes para confirmar.')
      }
    }

  } else if (text === 'n√£o' || text === 'no' || text === 'rejeitar') {
    // Rejeitar despesa pendente
    const pendingExpense = await prisma.expense.findFirst({
      where: {
        paidById: user.id,
        status: 'PENDING'
      },
      orderBy: { createdAt: 'desc' }
    })

    if (pendingExpense) {
      await prisma.expense.update({
        where: { id: pendingExpense.id },
        data: { status: 'REJECTED' }
      })

      await sendWhatsAppMessage(from, '‚ùå Despesa rejeitada. Envie um novo recibo se necess√°rio.')
    }

  } else if (text === 'ajuda' || text === 'help' || text === 'menu') {
    return await handleHelpCommand(from, user)

  } else if (text === 'saldo' || text.includes('saldo')) {
    return await handleBalanceCommand(from, user)

  } else if (text === 'grupos' || text.includes('grupos') || text.includes('grupo')) {
    return await handleGroupsCommand(from, user)

  } else if (text === 'lan√ßamento' || text === 'lancamento' || text.includes('despesa')) {
    return await handleExpenseCommand(from, user)

  } else if (text === 'relat√≥rio' || text === 'relatorio' || text.includes('relat√≥rio')) {
    return await handleReportCommand(from, user)

  } else if (text === 'planos' || text.includes('plano')) {
    return await handlePlansCommand(from, user)

  } else if (text === 'planilha' || text === 'dashboard') {
    const dashboardUrl = `${process.env.NEXTAUTH_URL}/dashboard`
    await sendWhatsAppMessage(from, `üìä Acesse seu dashboard: ${dashboardUrl}`)

  } else {
    // Mensagem mais humana para comando n√£o reconhecido
    const helpMessage = `ü§î N√£o entendi sua mensagem.

Mas olha s√≥ o que voc√™ pode pedir aqui no WhatsApp:

1Ô∏è‚É£ *saldo* ‚Üí ver seu saldo e d√©bitos
2Ô∏è‚É£ *grupos* ‚Üí listar ou criar grupos novos  
3Ô∏è‚É£ *lan√ßamento* ‚Üí registrar uma despesa manualmente
4Ô∏è‚É£ *relat√≥rio* ‚Üí gerar resumo das suas despesas
5Ô∏è‚É£ *planos* ‚Üí conhecer recursos e vantagens extras

Ou simplesmente envie um recibo e eu organizo os dados pra voc√™ ‚ú®`

    await sendWhatsAppMessage(from, helpMessage)
  }

  return NextResponse.json({ message: 'Mensagem processada' })
}

async function extractReceiptData(base64Image: string) {
  try {
    console.log('ü§ñ Tentando extra√ß√£o com OpenAI...')
    console.log('üìä Tamanho da imagem (base64):', base64Image.length)
    console.log('üîë OpenAI API Key configurada:', !!process.env.OPENAI_API_KEY)
    
          const prompt = `
        Voc√™ √© um motor de extra√ß√£o estruturada de dados de recibos, comprovantes banc√°rios, notas fiscais e transfer√™ncias brasileiras.
        Receber√° uma imagem e deve retornar apenas JSON, seguindo o esquema abaixo.
        Se um campo n√£o existir, use null. N√£o invente valores.

        IMPORTANTE: Para comprovantes banc√°rios (PIX, TED, DOC), o "recebedor" √© quem RECEBEU o dinheiro.
        Para recibos de compra, o "estabelecimento" √© onde foi feita a compra.

        Esquema JSON esperado:
        {
          "recebedor": {
            "nome": "Nome do recebedor (pessoa ou empresa)",
            "tipo": "pessoa, empresa, estabelecimento",
            "documento": "CPF ou CNPJ apenas d√≠gitos",
            "banco": "nome do banco se aplic√°vel",
            "conta": "n√∫mero da conta se aplic√°vel"
          },
          "estabelecimento": {
            "nome": "Nome do estabelecimento (para compras)",
            "tipo": "tipo do estabelecimento",
            "cnpj": "CNPJ apenas d√≠gitos",
            "endereco": "endere√ßo completo",
            "cidade": "cidade",
            "uf": "UF",
            "telefone": "telefone apenas d√≠gitos"
          },
          "documento": {
            "numero_recibo": "n√∫mero do recibo",
            "protocolo": "protocolo se houver",
            "tipo": "recibo, nota fiscal, comprovante banc√°rio, transfer√™ncia"
          },
          "datas": {
            "emissao": "data de emiss√£o YYYY-MM-DD",
            "previsao_entrega": "data de previs√£o se houver"
          },
          "itens": [
            {
              "descricao": "descri√ß√£o do item",
              "quantidade": 1,
              "valor_total": valor_total_numerico
            }
          ],
          "totais": {
            "total_final": valor_total_final_numerico,
            "moeda": "BRL",
            "pago": true/false
          },
          "tipo_transacao": "transfer√™ncia, pagamento, compra, saque, dep√≥sito",
          "metodo_pagamento": "PIX, TED, DOC, dinheiro, cart√£o, boleto"
        }
        
        Responda APENAS com o JSON v√°lido, sem texto adicional.
      `

    const response = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        {
          role: "user",
          content: [
            {
              type: "text",
              text: prompt
            },
            {
              type: "image_url",
              image_url: {
                url: `data:image/jpeg;base64,${base64Image}`
              }
            }
          ]
        }
      ],
      max_tokens: 1000
    })

    const content = response.choices[0]?.message?.content
    if (!content) {
      console.log('‚ùå OpenAI retornou conte√∫do vazio')
      return { success: false, error: 'Sem resposta da IA' }
    }

    console.log('üìù Resposta bruta da OpenAI:', content.substring(0, 200) + '...')

    // Tentar extrair JSON da resposta
    const jsonMatch = content.match(/\{[\s\S]*\}/)
    if (!jsonMatch) {
      console.log('‚ùå N√£o foi poss√≠vel encontrar JSON na resposta')
      return { success: false, error: 'Formato de resposta inv√°lido' }
    }

    const extractedData = JSON.parse(jsonMatch[0])
    console.log('‚úÖ JSON extra√≠do com sucesso:', Object.keys(extractedData))
    
    // Validar dados obrigat√≥rios
    const hasRecipient = extractedData.recebedor?.nome || extractedData.estabelecimento?.nome
    const hasAmount = extractedData.totais?.total_final
    
    if (!hasRecipient || !hasAmount) {
      console.log('‚ùå Dados obrigat√≥rios n√£o encontrados:', { hasRecipient: !!hasRecipient, hasAmount: !!hasAmount })
      return { success: false, error: 'Dados obrigat√≥rios n√£o encontrados (recebedor e valor)' }
    }

    return {
      success: true,
      data: extractedData,
      confidence: 0.95,
      source: 'openai'
    }

  } catch (error) {
    console.error('‚ùå Erro na extra√ß√£o OpenAI:', error)
    
    // Se for erro de quota, retornar erro espec√≠fico
    if (error && typeof error === 'object' && 'code' in error && error.code === 'insufficient_quota') {
      return { success: false, error: 'Quota OpenAI excedida' }
    }
    
    if (error && typeof error === 'object' && 'status' in error && error.status === 429) {
      return { success: false, error: 'Quota OpenAI excedida' }
    }
    
    return { success: false, error: 'Erro na extra√ß√£o' }
  }
}

// Fun√ß√£o para gerar mensagem promocional din√¢mica
async function generatePromotionalMessage(): Promise<string> {
  try {
    // Buscar planos dispon√≠veis do banco de dados
    const plans = await prisma.plan.findMany({
      where: { isActive: true },
      orderBy: { price: 'asc' },
      select: {
        name: true,
        price: true,
        description: true
      }
    })

    // URL de cadastro (ajuste conforme sua URL de produ√ß√£o)
    const signupUrl = process.env.NEXT_PUBLIC_APP_URL ? `${process.env.NEXT_PUBLIC_APP_URL}/auth/signup` : 'https://finsplit.app/auth/signup'

    let message = `Ol√°! üëã N√£o encontramos seu cadastro no FinSplit.

Para come√ßar a usar o FinSplit √© bem simples:

üîó Clique aqui para se cadastrar agora: ${signupUrl}

üöÄ Com o FinSplit voc√™ poder√°:

‚úÖ Organizar despesas pessoais e da sua fam√≠lia ‚Äì controle de mercado, contas fixas, viagens, lazer e mais
‚úÖ Gerenciar as finan√ßas da sua empresa ou equipe ‚Äì com relat√≥rios, categorias de custos e divis√£o entre s√≥cios/colaboradores  
‚úÖ Criar m√∫ltiplos grupos de custo ‚Äì fam√≠lia, viagem com amigos, empresa, eventos, projetos
‚úÖ Dividir gastos entre usu√°rios ‚Äì cada pessoa v√™ quanto deve pagar ou receber
‚úÖ Relat√≥rios claros e pr√°ticos ‚Äì saiba quem j√° pagou e acompanhe tudo em tempo real
‚úÖ Controle simplificado ‚Äì centralize informa√ß√µes sem precisar de planilhas complicadas

üí° Planos dispon√≠veis:\n`

    // Adicionar planos dinamicamente
    plans.forEach(plan => {
      const planPrice = plan.price === 0 ? 'Gr√°tis' : `R$ ${plan.price.toFixed(2)}/m√™s`
      const planDescription = plan.description || ''
      message += `\n${plan.name} ‚Äì ${planPrice}`
      if (planDescription) {
        message += ` ‚Äì ${planDescription}`
      }
    })

    message += `\n\nüëâ Cadastre-se agora mesmo e comece a simplificar suas finan√ßas!

${signupUrl}`

    console.log('üìù Mensagem promocional gerada:', message.length, 'caracteres')
    return message

  } catch (error) {
    console.error('‚ùå Erro ao gerar mensagem promocional:', error)
    // Fallback para mensagem est√°tica caso falhe
    return `Ol√°! üëã N√£o encontramos seu cadastro no FinSplit.

Para come√ßar a usar o FinSplit √© bem simples:

üîó Cadastre-se agora: ${process.env.NEXT_PUBLIC_APP_URL || 'https://finsplit.app'}/auth/signup

üöÄ Organize suas despesas, divida gastos e tenha controle total das suas finan√ßas!

üëâ Cadastre-se agora mesmo e comece a simplificar suas finan√ßas!`
  }
}

async function sendWhatsAppMessage(to: string, body: string) {
  try {
    console.log('üì± Preparando envio de mensagem WhatsApp...')
    console.log('üîë Twilio configurado:', !!process.env.TWILIO_ACCOUNT_SID && !!process.env.TWILIO_AUTH_TOKEN && !!process.env.TWILIO_PHONE_NUMBER)
    
    // Formatar n√∫mero para WhatsApp
    const formattedFrom = `whatsapp:${process.env.TWILIO_PHONE_NUMBER}`
    const formattedTo = to.startsWith('whatsapp:') ? to : `whatsapp:${to}`
    
    console.log('üì± Enviando mensagem WhatsApp:')
    console.log('  From:', formattedFrom)
    console.log('  To:', formattedTo)
    console.log('  Body preview:', body.substring(0, 100) + '...')
    
    await twilioClient.messages.create({
      body,
      from: formattedFrom,
      to: formattedTo
    })
    
    console.log('‚úÖ Mensagem WhatsApp enviada com sucesso')
  } catch (error: any) {
    console.error('‚ùå Erro ao enviar mensagem WhatsApp:', error)
    console.error('  Detalhes:', error.message)
    console.error('  C√≥digo:', error.code)
  }
}

// ===== COMANDOS DO WHATSAPP =====

async function handleHelpCommand(from: string, user: any) {
  const helpMessage = `ü§ñ *Menu de Comandos do FinSplit*

üì± *O que voc√™ pode fazer aqui:*

üîπ Envie um *recibo* (foto) ‚Üí IA organiza automaticamente
üîπ Digite *saldo* ‚Üí veja seus d√©bitos e cr√©ditos  
üîπ Digite *grupos* ‚Üí gerencie seus grupos
üîπ Digite *lan√ßamento* ‚Üí registre despesa manual
üîπ Digite *relat√≥rio* ‚Üí resumo das suas finan√ßas
üîπ Digite *planos* ‚Üí veja recursos dispon√≠veis

‚úÖ *Para confirmar despesas:* "sim" ou "confirmar"
‚ùå *Para rejeitar:* "n√£o" ou "rejeitar"

üí° *Dica:* Apenas envie a foto do recibo que eu cuido do resto!`

  await sendWhatsAppMessage(from, helpMessage)
  return NextResponse.json({ message: 'Help command processed' })
}

async function handleBalanceCommand(from: string, user: any) {
  try {
    // Buscar grupos do usu√°rio
    const userGroups = await prisma.groupMember.findMany({
      where: { userId: user.id },
      include: {
        group: {
          include: {
            expenses: {
              include: {
                payments: true
              }
            }
          }
        }
      }
    })

    if (userGroups.length === 0) {
      await sendWhatsAppMessage(from, `üí∞ *Seu Saldo*

Voc√™ ainda n√£o participa de nenhum grupo.

Digite *grupos* para criar ou entrar em um grupo! üìù`)
      return NextResponse.json({ message: 'Balance command - no groups' })
    }

    let totalOwed = 0
    let totalToPay = 0
    let balanceDetails = `üí∞ *Seu Saldo Geral*\n\n`

    userGroups.forEach(userGroup => {
      const group = userGroup.group
      let groupBalance = 0
      
      group.expenses.forEach(expense => {
        if (expense.paidById === user.id) {
          // Usu√°rio pagou - deve receber
          const unpaidAmount = expense.payments
            .filter(p => p.status === 'PENDING')
            .reduce((sum, p) => sum + Number(p.amount), 0)
          groupBalance += unpaidAmount
        } else {
          // Usu√°rio deve pagar
          const userPayment = expense.payments.find(p => p.userId === user.id)
          if (userPayment && userPayment.status === 'PENDING') {
            groupBalance -= Number(userPayment.amount)
          }
        }
      })

      if (groupBalance > 0) {
        totalOwed += groupBalance
        balanceDetails += `üü¢ *${group.name}*: +R$ ${groupBalance.toFixed(2)}\n`
      } else if (groupBalance < 0) {
        totalToPay += Math.abs(groupBalance)
        balanceDetails += `üî¥ *${group.name}*: -R$ ${Math.abs(groupBalance).toFixed(2)}\n`
      } else {
        balanceDetails += `‚ö™ *${group.name}*: Quitado\n`
      }
    })

    const netBalance = totalOwed - totalToPay
    balanceDetails += `\nüìä *Resumo:*\n`
    balanceDetails += `üíö A receber: R$ ${totalOwed.toFixed(2)}\n`
    balanceDetails += `‚ù§Ô∏è A pagar: R$ ${totalToPay.toFixed(2)}\n`
    balanceDetails += `üí∞ Saldo l√≠quido: ${netBalance >= 0 ? '+' : ''}R$ ${netBalance.toFixed(2)}`

    await sendWhatsAppMessage(from, balanceDetails)
    return NextResponse.json({ message: 'Balance command processed' })

  } catch (error) {
    console.error('Erro no comando saldo:', error)
    await sendWhatsAppMessage(from, '‚ùå Erro ao buscar seu saldo. Tente novamente.')
    return NextResponse.json({ message: 'Balance command error' })
  }
}

async function handleGroupsCommand(from: string, user: any) {
  try {
    // Buscar grupos do usu√°rio
    const userGroups = await prisma.groupMember.findMany({
      where: { userId: user.id },
      include: {
        group: {
          include: {
            _count: {
              select: {
                members: true,
                expenses: true
              }
            }
          }
        }
      },
      orderBy: {
        joinedAt: 'desc'
      }
    })

    if (userGroups.length === 0) {
      const message = `üë• *Seus Grupos*

Voc√™ ainda n√£o participa de nenhum grupo.

üîó *Para criar um grupo:*
Acesse: ${process.env.NEXTAUTH_URL}/dashboard/groups

Ou pe√ßa para algu√©m te adicionar em um grupo existente! üòä`

      await sendWhatsAppMessage(from, message)
      return NextResponse.json({ message: 'Groups command - no groups' })
    }

    let groupsMessage = `üë• *Seus Grupos* (${userGroups.length})\n\n`

    userGroups.forEach((userGroup, index) => {
      const group = userGroup.group
      const memberRole = userGroup.role === 'OWNER' ? 'üëë' : 'üë§'
      
      groupsMessage += `${index + 1}Ô∏è‚É£ ${memberRole} *${group.name}*\n`
      groupsMessage += `   ‚Ä¢ ${group._count.members} membros\n`
      groupsMessage += `   ‚Ä¢ ${group._count.expenses} despesas\n\n`
    })

    groupsMessage += `üîó *Gerenciar grupos:*\n${process.env.NEXTAUTH_URL}/dashboard/groups`

    await sendWhatsAppMessage(from, groupsMessage)
    return NextResponse.json({ message: 'Groups command processed' })

  } catch (error) {
    console.error('Erro no comando grupos:', error)
    await sendWhatsAppMessage(from, '‚ùå Erro ao buscar seus grupos. Tente novamente.')
    return NextResponse.json({ message: 'Groups command error' })
  }
}

async function handleExpenseCommand(from: string, user: any) {
  const message = `üí∏ *Registrar Despesa*

Para registrar uma despesa voc√™ pode:

üì∏ *M√©todo 1 - Autom√°tico:*
Envie uma foto do recibo que a IA extrai os dados automaticamente!

‚úèÔ∏è *M√©todo 2 - Manual:*
Acesse: ${process.env.NEXTAUTH_URL}/dashboard/expenses/new

üéØ *Dica:* O m√©todo autom√°tico √© muito mais r√°pido - apenas tire a foto e envie! üì±`

  await sendWhatsAppMessage(from, message)
  return NextResponse.json({ message: 'Expense command processed' })
}

async function handleReportCommand(from: string, user: any) {
  try {
    // Buscar estat√≠sticas b√°sicas do usu√°rio
    const thisMonth = new Date()
    thisMonth.setDate(1)
    thisMonth.setHours(0, 0, 0, 0)

    const expenses = await prisma.expense.findMany({
      where: {
        paidById: user.id,
        date: {
          gte: thisMonth
        },
        status: 'CONFIRMED'
      },
      include: {
        group: true,
        category: true
      }
    })

    const totalExpenses = expenses.reduce((sum, exp) => sum + Number(exp.amount), 0)
    const groupCounts = expenses.reduce((acc, exp) => {
      acc[exp.group.name] = (acc[exp.group.name] || 0) + 1
      return acc
    }, {} as Record<string, number>)

    const topGroup = Object.entries(groupCounts).sort((a, b) => b[1] - a[1])[0]

    let reportMessage = `üìä *Relat√≥rio R√°pido - ${thisMonth.toLocaleDateString('pt-BR', { month: 'long', year: 'numeric' })}*\n\n`
    reportMessage += `üí∞ Total gasto: R$ ${totalExpenses.toFixed(2)}\n`
    reportMessage += `üìà Despesas registradas: ${expenses.length}\n\n`

    if (topGroup) {
      reportMessage += `üèÜ Grupo mais ativo: *${topGroup[0]}* (${topGroup[1]} despesas)\n\n`
    }

    reportMessage += `üìã *Relat√≥rio completo:*\n${process.env.NEXTAUTH_URL}/dashboard/reports`

    await sendWhatsAppMessage(from, reportMessage)
    return NextResponse.json({ message: 'Report command processed' })

  } catch (error) {
    console.error('Erro no comando relat√≥rio:', error)
    await sendWhatsAppMessage(from, '‚ùå Erro ao gerar relat√≥rio. Tente novamente.')
    return NextResponse.json({ message: 'Report command error' })
  }
}

async function handlePlansCommand(from: string, user: any) {
  try {
    // Buscar plano atual do usu√°rio e planos dispon√≠veis
    const currentTenant = await prisma.tenant.findUnique({
      where: { id: user.tenantId },
      include: {
        customPlan: true
      }
    })

    const plans = await prisma.plan.findMany({
      where: { isActive: true },
      orderBy: { price: 'asc' }
    })

    let plansMessage = `üíé *Planos FinSplit*\n\n`
    
    const currentPlanName = currentTenant?.customPlan 
      ? currentTenant.customPlan.name 
      : (currentTenant?.plan === 'FREE' ? 'Plano Gratuito' : 'Plano Premium')

    plansMessage += `üéØ *Seu plano atual:* ${currentPlanName}\n`
    plansMessage += `üí≥ Cr√©ditos: ${currentTenant?.credits || 0}\n`
    plansMessage += `üì± WhatsApp: ${currentTenant?.hasWhatsApp ? '‚úÖ' : '‚ùå'}\n\n`

    plansMessage += `üìã *Planos dispon√≠veis:*\n\n`

    plans.forEach(plan => {
      const price = plan.price === 0 ? 'Gr√°tis' : `R$ ${plan.price.toFixed(2)}/m√™s`
      plansMessage += `üîπ *${plan.name}* - ${price}\n`
      if (plan.description) {
        plansMessage += `   ${plan.description}\n`
      }
      plansMessage += `   ‚Ä¢ ${plan.creditsIncluded} cr√©ditos\n`
      plansMessage += `   ‚Ä¢ ${plan.maxGroups} grupos\n`
      plansMessage += `   ‚Ä¢ WhatsApp: ${plan.hasWhatsApp ? '‚úÖ' : '‚ùå'}\n\n`
    })

    plansMessage += `üõí *Alterar plano:*\nEntre em contato com o suporte`

    await sendWhatsAppMessage(from, plansMessage)
    return NextResponse.json({ message: 'Plans command processed' })

  } catch (error) {
    console.error('Erro no comando planos:', error)
    await sendWhatsAppMessage(from, '‚ùå Erro ao buscar planos. Tente novamente.')
    return NextResponse.json({ message: 'Plans command error' })
  }
}

// ===== FUN√á√ïES DE UTILIDADE =====

// Fun√ß√£o para criar ou obter grupo padr√£o
// Fun√ß√£o para verificar duplicatas
async function checkDuplicateExpense(userId: string, data: any) {
  try {
    const duplicate = await prisma.expense.findFirst({
      where: {
        paidById: userId,
        amount: data.totais?.total_final || data.amount,
        description: data.recebedor?.nome || data.estabelecimento?.nome || data.merchant,
        date: data.datas?.emissao ? new Date(data.datas.emissao) : new Date(data.date),
        status: { in: ['CONFIRMED', 'PENDING'] }
      }
    })

    return duplicate
  } catch (error) {
    console.error('‚ùå Erro ao verificar duplicatas:', error)
    return null
  }
}

// Fun√ß√£o para validar campos obrigat√≥rios
function validateRequiredFields(data: any) {
  const required = {
    recebedor: data.recebedor?.nome || data.estabelecimento?.nome || data.merchant,
    data: data.datas?.emissao || data.date,
    valor: data.totais?.total_final || data.amount,
    pagador: true, // Sempre dispon√≠vel (usu√°rio atual)
    categoria: data.category || data.tipo_transacao
  }

  const missing = Object.entries(required)
    .filter(([key, value]) => !value)
    .map(([key]) => key)

  return {
    isValid: missing.length === 0,
    missing,
    data: required
  }
}

// Fun√ß√£o para gerenciar estado do usu√°rio
async function getUserState(userId: string) {
  try {
    // Por enquanto, vamos usar uma abordagem simples com cache em mem√≥ria
    // Em produ√ß√£o, isso deveria ser armazenado no banco de dados
    return (global as any).userStates?.[userId] || null
  } catch (error) {
    console.error('‚ùå Erro ao buscar estado do usu√°rio:', error)
    return null
  }
}

async function setUserState(userId: string, state: any) {
  try {
    if (!(global as any).userStates) {
      (global as any).userStates = {}
    }
    (global as any).userStates[userId] = state
    return true
  } catch (error) {
    console.error('‚ùå Erro ao definir estado do usu√°rio:', error)
    return false
  }
}

// Fun√ß√£o para processar sele√ß√£o de grupo
async function handleGroupSelection(from: string, text: string, user: any, userState: any) {
  try {
    const selection = parseInt(text)
    
    if (isNaN(selection)) {
      await sendWhatsAppMessage(from, '‚ùå Por favor, digite apenas o n√∫mero do grupo (1, 2, 3...) ou "0" para novo grupo.')
      return NextResponse.json({ message: 'Sele√ß√£o inv√°lida' })
    }

    if (selection === 0) {
      // Criar novo grupo
      const newGroup = await prisma.group.create({
        data: {
          name: `Grupo ${new Date().toLocaleDateString('pt-BR')}`,
          description: 'Grupo criado via WhatsApp',
          tenantId: user.tenantId,
          members: {
            create: {
              userId: user.id,
              role: 'ADMIN'
            }
          }
        }
      })

      await sendWhatsAppMessage(from, `‚úÖ Novo grupo criado: "${newGroup.name}"\n\nAgora responda "sim" para confirmar a despesa neste grupo.`)
      
      // Atualizar estado do usu√°rio para aguardar confirma√ß√£o
      await setUserState(user.id, { action: 'WAITING_CONFIRMATION', groupId: newGroup.id })
      
    } else if (selection > 0 && selection <= userState.groups.length) {
      // Selecionar grupo (pr√©-definido ou personalizado)
      const selectedGroup = userState.groups[selection - 1]
      
      console.log('üéØ Grupo selecionado:', selectedGroup.name, 'ID:', selectedGroup.id)
      
      // Se for grupo pr√©-definido, criar ou encontrar o grupo real
      let actualGroupId = selectedGroup.id
      
      if (selection <= 4) {
        // Grupo pr√©-definido - criar se n√£o existir
        let actualGroup = await prisma.group.findFirst({
          where: {
            name: selectedGroup.name,
            tenantId: user.tenantId
          }
        })
        
        if (!actualGroup) {
          actualGroup = await prisma.group.create({
            data: {
              name: selectedGroup.name,
              description: selectedGroup.description,
              tenantId: user.tenantId,
              members: {
                create: {
                  userId: user.id,
                  role: 'ADMIN'
                }
              }
            }
          })
          console.log('‚úÖ Grupo pr√©-definido criado:', actualGroup.name)
        }
        
        actualGroupId = actualGroup.id
      }
      
      await sendWhatsAppMessage(from, `‚úÖ Grupo selecionado: "${selectedGroup.name}"\n\nAgora responda "sim" para confirmar a despesa neste grupo.`)
      
      // Atualizar estado do usu√°rio para aguardar confirma√ß√£o
      const newState = { 
        action: 'WAITING_CONFIRMATION', 
        groupId: actualGroupId,
        pendingExpenseData: userState.pendingExpenseData // Manter dados da despesa
      }
      
      console.log('üîÑ Definindo novo estado:', newState)
      await setUserState(user.id, newState)
      
      console.log('‚úÖ Estado atualizado, aguardando confirma√ß√£o...')
      
    } else {
      await sendWhatsAppMessage(from, `‚ùå N√∫mero inv√°lido. Digite um n√∫mero entre 1 e ${userState.groups.length}, ou "0" para novo grupo.`)
    }

    return NextResponse.json({ message: 'Sele√ß√£o de grupo processada' })
    
  } catch (error) {
    console.error('‚ùå Erro ao processar sele√ß√£o de grupo:', error)
    await sendWhatsAppMessage(from, '‚ùå Erro ao processar sele√ß√£o. Digite "ajuda" para ver as op√ß√µes.')
    return NextResponse.json({ message: 'Erro ao processar sele√ß√£o' })
  }
}

// Fun√ß√£o para listar grupos do usu√°rio
async function getUserGroups(userId: string, tenantId: string) {
  try {
    const groups = await prisma.group.findMany({
      where: {
        tenantId,
        members: {
          some: { userId }
        }
      },
      select: {
        id: true,
        name: true,
        description: true
      }
    })

    return groups
  } catch (error) {
    console.error('‚ùå Erro ao buscar grupos:', error)
    return []
  }
}

async function getOrCreateDefaultGroup(tenantId: string, userId: string) {
  try {
    // Tentar encontrar um grupo existente
    let group = await prisma.group.findFirst({
      where: { tenantId }
    })

    // Se n√£o existir, criar um grupo padr√£o
    if (!group) {
      group = await prisma.group.create({
        data: {
          name: 'Despesas Gerais',
          description: 'Grupo padr√£o para despesas via WhatsApp',
          tenantId,
          members: {
            create: {
              userId,
              role: 'ADMIN'
            }
          }
        }
      })
      console.log('‚úÖ Grupo padr√£o criado:', group.name, 'com usu√°rio:', userId)
    } else {
      // Verificar se o usu√°rio j√° √© membro
      const existingMember = await prisma.groupMember.findFirst({
        where: {
          groupId: group.id,
          userId
        }
      })

      // Se n√£o for membro, adicionar
      if (!existingMember) {
        await prisma.groupMember.create({
          data: {
            groupId: group.id,
            userId,
            role: 'MEMBER'
          }
        })
        console.log('‚úÖ Usu√°rio adicionado ao grupo:', userId)
      }
    }

    return group
  } catch (error) {
    console.error('‚ùå Erro ao criar/obter grupo padr√£o:', error)
    throw error
  }
}

 
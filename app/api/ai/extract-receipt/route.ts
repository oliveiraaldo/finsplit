import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/lib/auth'
import { prisma } from '@/lib/prisma'
import { openai } from '@/lib/openai'

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session?.user?.id) {
      return NextResponse.json(
        { message: 'N√£o autorizado' },
        { status: 401 }
      )
    }

    const { imageBase64, description, category: userCategory } = await request.json()

    if (!imageBase64) {
      return NextResponse.json(
        { message: 'Imagem √© obrigat√≥ria' },
        { status: 400 }
      )
    }

    // Verificar se o usu√°rio tem IA habilitada
    const user = await prisma.user.findUnique({
      where: { id: session.user.id },
      include: { tenant: true }
    })

    if (!user) {
      return NextResponse.json(
        { message: 'Usu√°rio n√£o encontrado' },
        { status: 404 }
      )
    }

    // Verificar se o usu√°rio tem IA habilitada
    if (!user.tenant.hasAI) {
      return NextResponse.json(
        { message: 'Seu plano n√£o inclui IA' },
        { status: 403 }
      )
    }

    // Verificar cr√©ditos
    if (user.tenant.credits <= 0) {
      return NextResponse.json(
        { message: 'Cr√©ditos insuficientes' },
        { status: 403 }
      )
    }

    // Extrair dados com OpenAI
    const extractionResult = await extractReceiptData(imageBase64, description)

    if (!extractionResult.success) {
      return NextResponse.json(
        { message: 'Falha na extra√ß√£o dos dados: ' + extractionResult.error },
        { status: 400 }
      )
    }

    // Consumir cr√©dito
    await prisma.tenant.update({
      where: { id: user.tenantId },
      data: { credits: { decrement: 1 } }
    })

    // Log de auditoria
    await prisma.auditLog.create({
      data: {
        action: 'AI_RECEIPT_EXTRACTION',
        entity: 'USER',
        entityId: user.id,
        details: { 
          success: true,
          confidence: extractionResult.confidence,
          extractedData: extractionResult.data
        },
        tenantId: user.tenantId,
        userId: user.id
      }
    })

    return NextResponse.json({
      message: 'Dados extra√≠dos com sucesso',
      data: extractionResult.data,
      confidence: extractionResult.confidence
    })

  } catch (error) {
    console.error('Erro na extra√ß√£o de recibo:', error)
    return NextResponse.json(
      { message: 'Erro interno do servidor' },
      { status: 500 }
    )
  }
}

async function extractReceiptData(imageBase64: string, description?: string) {
  try {
    console.log('ü§ñ Tentando extra√ß√£o com OpenAI...')
    
    const prompt = `
      Voc√™ √© um motor de extra√ß√£o estruturada de dados de recibos, comprovantes banc√°rios, notas fiscais e transfer√™ncias brasileiras.
      Receber√° uma imagem e deve retornar apenas JSON, seguindo o esquema abaixo.
      Se um campo n√£o existir, use null. N√£o invente valores.

      IMPORTANTE: Para comprovantes banc√°rios (PIX, TED, DOC), o "recebedor" √© quem RECEBEU o dinheiro.
      Para recibos de compra, o "estabelecimento" √© onde foi feita a compra.

      Esquema JSON esperado:
      {
        "recebedor": {
          "nome": "Nome do recebedor (pessoa ou empresa)",
          "tipo": "pessoa, empresa, estabelecimento",
          "documento": "CPF ou CNPJ apenas d√≠gitos",
          "banco": "nome do banco se aplic√°vel",
          "conta": "n√∫mero da conta se aplic√°vel"
        },
        "estabelecimento": {
          "nome": "Nome do estabelecimento (para compras)",
          "tipo": "tipo do estabelecimento",
          "cnpj": "CNPJ apenas d√≠gitos",
          "endereco": "endere√ßo completo",
          "cidade": "cidade",
          "uf": "UF",
          "telefone": "telefone apenas d√≠gitos"
        },
        "documento": {
          "numero_recibo": "n√∫mero do recibo",
          "protocolo": "protocolo se houver",
          "tipo": "recibo, nota fiscal, comprovante banc√°rio, transfer√™ncia"
        },
        "datas": {
          "emissao": "data de emiss√£o YYYY-MM-DD",
          "previsao_entrega": "data de previs√£o se houver"
        },
        "itens": [
          {
            "descricao": "descri√ß√£o do item",
            "quantidade": 1,
            "valor_total": valor_total_numerico
          }
        ],
        "totais": {
          "total_final": valor_total_final_numerico,
          "moeda": "BRL",
          "pago": true/false
        },
        "tipo_transacao": "transfer√™ncia, pagamento, compra, saque, dep√≥sito",
        "metodo_pagamento": "PIX, TED, DOC, dinheiro, cart√£o, boleto"
      }

      ${description ? `Descri√ß√£o adicional: ${description}` : ''}
      
      Responda APENAS com o JSON v√°lido, sem texto adicional.
    `

    const response = await openai.chat.completions.create({
      model: "gpt-4o", // Modelo atualizado (gpt-4o inclui vision)
      messages: [
        {
          role: "user",
          content: [
            {
              type: "text",
              text: prompt
            },
            {
              type: "image_url",
              image_url: {
                url: `data:image/jpeg;base64,${imageBase64}`
              }
            }
          ]
        }
      ],
      max_tokens: 1000
    })

    const content = response.choices[0]?.message?.content
    if (!content) {
      console.log('‚ùå OpenAI retornou conte√∫do vazio')
      return { success: false, error: 'Sem resposta da IA' }
    }

    console.log('üìù Resposta bruta da OpenAI:', content.substring(0, 200) + '...')

    // Tentar extrair JSON da resposta
    const jsonMatch = content.match(/\{[\s\S]*\}/)
    if (!jsonMatch) {
      console.log('‚ùå N√£o foi poss√≠vel encontrar JSON na resposta')
      return { success: false, error: 'Formato de resposta inv√°lido' }
    }

    const extractedData = JSON.parse(jsonMatch[0])
    console.log('‚úÖ JSON extra√≠do com sucesso:', Object.keys(extractedData))
    
    // Validar dados obrigat√≥rios
    const hasRecipient = extractedData.recebedor?.nome || extractedData.estabelecimento?.nome
    const hasAmount = extractedData.totais?.total_final
    
    if (!hasRecipient || !hasAmount) {
      console.log('‚ùå Dados obrigat√≥rios n√£o encontrados:', { hasRecipient: !!hasRecipient, hasAmount: !!hasAmount })
      return { success: false, error: 'Dados obrigat√≥rios n√£o encontrados (recebedor e valor)' }
    }

    return {
      success: true,
      data: extractedData,
      confidence: 0.95, // Confian√ßa alta para GPT-4o
      source: 'openai'
    }

  } catch (error) {
    console.error('‚ùå Erro na extra√ß√£o OpenAI:', error)
    
    // Se for erro de quota, retornar erro espec√≠fico
    if (error && typeof error === 'object' && 'code' in error && error.code === 'insufficient_quota') {
      return { success: false, error: 'Quota OpenAI excedida' }
    }
    
    if (error && typeof error === 'object' && 'status' in error && error.status === 429) {
      return { success: false, error: 'Quota OpenAI excedida' }
    }
    
    return { success: false, error: 'Erro na extra√ß√£o' }
  }
} 